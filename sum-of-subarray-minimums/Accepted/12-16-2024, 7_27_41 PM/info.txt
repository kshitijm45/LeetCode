{"id":1480271659,"question_id":943,"lang":"cpp","lang_name":"C++","time":"3 days, 16 hours","timestamp":1734357461,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1480271659/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"47.4 MB","code":"class Solution {\nconst int MOD = 1e9+7;\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        stack<int> st;\n        long long sum = 0;\n        int n = arr.size();\n        vector<int> left(n,-1);\n        vector<int> right(n,n);\n        for(int i=0; i<n; i++) {\n            while(!st.empty() && arr[st.top()] > arr[i])\n                st.pop();\n            if(!st.empty())\n                left[i] = st.top();\n            st.push(i);\n        }\n\n        st = stack<int>();\n\n        for(int i=n-1; i>=0; i--) {\n            while(!st.empty() && arr[st.top()] >= arr[i])\n                st.pop();\n            if(!st.empty())\n                right[i] = st.top();\n            st.push(i);\n        }\n\n        for(int i=0; i<n; i++) {\n            long long leftCount = i - left[i];\n            long long rightCount = right[i] - i;\n            long long contribution = (leftCount * rightCount % MOD) * arr[i] % MOD;\n            sum = (sum + contribution) % MOD;\n        }\n\n        return sum;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-minimums","has_notes":false,"flag_type":1}