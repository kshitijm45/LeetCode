{"id":1476366288,"question_id":1034,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1733940533,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1476366288/","is_pending":"Not Pending","title":"Subarrays with K Different Integers","memory":"53.5 MB","code":"class Solution {\npublic:\n    int atMost(vector<int>& nums, int k) {\n        if(k < 0)\n            return 0;\n        int left = 0, right = 0;\n        int total = 0, curr = 0;\n        unordered_map<int, int> mp;\n        while(right < nums.size()) {\n            if(mp[nums[right]] == 0)\n                curr++;\n            mp[nums[right]]++;\n            while(curr > k) {\n                mp[nums[left]]--;\n                if(mp[nums[left]] == 0)\n                    curr--;\n                left++;\n            }\n            total+=(right - left + 1);\n            right++;\n        }\n        return total;\n    }\n\n    int subarraysWithKDistinct(vector<int>& nums, int k) {\n       return atMost(nums, k) - atMost(nums, k-1);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"subarrays-with-k-different-integers","has_notes":false,"flag_type":1}