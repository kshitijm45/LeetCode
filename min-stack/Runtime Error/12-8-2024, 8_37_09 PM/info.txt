{"id":1473567485,"question_id":155,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1733670429,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1473567485/","is_pending":"Not Pending","title":"Min Stack","memory":"N/A","code":"class MinStack {\npublic:\n    stack<int> st;\n    int minVal = INT_MAX;\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        if(st.empty()) {\n            st.push(val);\n            minVal = val;\n        }\n        else {\n            if(val < minVal) {\n                int temp = 2 * val - minVal;\n                st.push(temp);\n                minVal = val;\n            }\n            else {\n                st.push(val);\n            }\n        }\n    }\n    \n    void pop() {\n        if(st.empty())\n            return;\n        if(st.top() < minVal) {\n            int temp = 2 * minVal - st.top();\n            minVal = temp;\n            st.pop();\n        }\n        else\n            st.pop();\n    }\n    \n    int top() {\n        return (st.top() < minVal) ? 2*minVal - st.top() : st.top();\n    }\n    \n    int getMin() {\n        return minVal;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111110000000000000000000000","title_slug":"min-stack","has_notes":false,"flag_type":1}