{"id":1421035678,"question_id":234,"lang":"cpp","lang_name":"C++","time":"2Â months, 1Â week","timestamp":1728828042,"status":10,"status_display":"Accepted","runtime":"141 ms","url":"/submissions/detail/1421035678/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"116.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* next = NULL;\n        ListNode* prev = NULL;\n        ListNode* current = head;\n        while(current) {\n            next = current->next;\n            current->next = prev;\n            prev = current;\n            current = next;\n        }\n        return prev;\n    }\n\n    bool isPalindrome(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while(fast != NULL && fast->next != NULL) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        fast = reverseList(slow);\n        slow = head;\n        while(fast != NULL && slow != NULL) {\n            if(slow->val != fast->val)\n                return false;\n            slow = slow->next;\n            fast = fast->next;\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}