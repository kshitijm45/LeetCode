{"id":1478038335,"question_id":410,"lang":"cpp","lang_name":"C++","time":"6 days, 12 hours","timestamp":1734112546,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1478038335/","is_pending":"Not Pending","title":"Split Array Largest Sum","memory":"10.5 MB","code":"class Solution {\nprivate:\n    bool isPossible(vector<int>& nums, int k, int maxsum) {\n        int sum = 0, cnt=1;\n        for(auto it: nums) {\n            sum+=it;\n            if(sum > maxsum) {\n                cnt++;\n                sum = it;\n            }\n        }\n        if(cnt <= k)\n            return true;\n        return false;\n    }\n\npublic:\n    int splitArray(vector<int>& nums, int k) {\n        int left = *max_element(nums.begin(), nums.end()), right = accumulate(nums.begin(), nums.end(), 0);\n        while(left <= right) {\n            int mid = left + (right - left)/2;\n            if(isPossible(nums, k, mid))\n                right = mid-1;\n            else\n                left = mid + 1;\n        }\n        return left;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"split-array-largest-sum","has_notes":false,"flag_type":1}