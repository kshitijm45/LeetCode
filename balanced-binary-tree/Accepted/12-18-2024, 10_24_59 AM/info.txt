{"id":1481684008,"question_id":110,"lang":"cpp","lang_name":"C++","time":"2 days, 1 hour","timestamp":1734497699,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1481684008/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"23.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    pair<bool, int> findBal(TreeNode* root) {\n        if(root == NULL)\n            return {true, 0};\n\n        pair<bool, int> left = findBal(root->left);\n        pair<bool, int> right = findBal(root->right);\n\n        pair<bool, int> ans;\n        ans.first = left.first & right.first & (abs(left.second - right.second) <= 1);\n        ans.second = max(left.second, right.second) + 1;\n\n        return ans;\n    }\n\n    bool isBalanced(TreeNode* root) {\n        return findBal(root).first;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}