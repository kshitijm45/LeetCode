{"id":1472332066,"question_id":84,"lang":"cpp","lang_name":"C++","time":"1 week, 6 days","timestamp":1733547717,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1472332066/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"85.8 MB","code":"class Solution {\nprivate:\n    vector<int> nextSmallerElement(vector<int>& heights) {\n        int n = heights.size();\n        stack<int> st;\n        vector<int> ans(n);\n        for(int i=n-1; i>=0; i--) {\n            while(!st.empty() && heights[st.top()] >= heights[i])\n                st.pop();\n            ans[i] = st.empty() ? -1 : st.top();\n            st.push(i);\n        }\n        return ans;\n    }\n\nprivate:\n    vector<int> prevSmallerElement(vector<int>& heights) {\n        int n = heights.size();\n        stack<int> st;\n        vector<int> ans(n);\n        for(int i=0; i<n; i++) {\n            while(!st.empty() && heights[st.top()] >= heights[i])\n                st.pop();\n            ans[i] = st.empty() ? -1 : st.top();\n            st.push(i);\n        }\n        return ans;\n    }\n\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        int n = heights.size();\n        vector<int> next = nextSmallerElement(heights);\n        vector<int> prev = prevSmallerElement(heights);\n        int area = INT_MIN;\n        for(int i=0; i<n; i++) {\n            int length = heights[i];\n            if(next[i] == -1)\n                next[i] = n;\n            int breadth = next[i] - prev[i] - 1;\n            int newarea = length * breadth;\n            area = max(area, newarea);\n        }\n        return area;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}